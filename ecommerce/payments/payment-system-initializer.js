/**
 * PAYMENT SYSTEM INITIALIZER
 * Garantiza que todos los m√≥dulos se carguen en el orden correcto
 * y proporciona verificaci√≥n de dependencias
 */

class PaymentSystemInitializer {
    constructor() {
        this.loadedModules = new Set();
        this.requiredModules = [
            'PaymentConfig',
            'PaymentValidation', 
            'PaymentFormatting',
            'PaymentProcessor',
            'PayPalProcessor',
            'PaymentManager',
            'PaymentIntegration'
        ];
        this.initializationAttempts = 0;
        this.maxAttempts = 10;
    }

    /**
     * Verifica que todos los m√≥dulos requeridos est√©n disponibles
     */
    checkModules() {
        console.log('üîç Verificando m√≥dulos del sistema de pagos...');
        
        const moduleStatus = {};
        let allLoaded = true;

        this.requiredModules.forEach(moduleName => {
            const isLoaded = typeof window[moduleName] !== 'undefined';
            moduleStatus[moduleName] = isLoaded;
            
            if (isLoaded) {
                this.loadedModules.add(moduleName);
                console.log(`‚úÖ ${moduleName} - Cargado`);
            } else {
                allLoaded = false;
                console.log(`‚ùå ${moduleName} - NO cargado`);
            }
        });

        return { allLoaded, moduleStatus };
    }

    /**
     * Inicializa el sistema de pagos cuando todos los m√≥dulos est√©n listos
     */
    async initializeWhenReady() {
        console.log('üöÄ Intentando inicializar sistema de pagos...');
        
        const { allLoaded, moduleStatus } = this.checkModules();
        
        if (allLoaded) {
            console.log('‚úÖ Todos los m√≥dulos cargados - Inicializando sistema');
            try {
                await this.initializeSystem();
                return true;
            } catch (error) {
                console.error('‚ùå Error inicializando sistema:', error);
                return false;
            }
        } else {
            console.log(`‚è≥ Faltan m√≥dulos - Intento ${this.initializationAttempts + 1}/${this.maxAttempts}`);
            
            if (this.initializationAttempts < this.maxAttempts) {
                this.initializationAttempts++;
                setTimeout(() => this.initializeWhenReady(), 500);
            } else {
                console.error('‚ùå M√°ximo de intentos alcanzado. M√≥dulos faltantes:', 
                    this.requiredModules.filter(m => !moduleStatus[m]));
                this.showErrorMessage();
            }
            return false;
        }
    }

    /**
     * Inicializa el sistema completo
     */
    async initializeSystem() {
        console.log('üîß Inicializando Payment Integration...');
        
        // Agregar estilos si no est√°n presentes
        if (window.PaymentIntegration && window.PaymentIntegration.addIntegrationStyles) {
            window.PaymentIntegration.addIntegrationStyles();
        }

        // Inicializar la integraci√≥n - verificar si es clase o instancia
        if (window.PaymentIntegration) {
            if (typeof window.PaymentIntegration === 'function') {
                // Es una clase, crear instancia
                console.log('üîß PaymentIntegration es una clase, creando instancia...');
                const paymentIntegration = new window.PaymentIntegration();
                await paymentIntegration.initialize();
                window.paymentIntegrationInstance = paymentIntegration;
            } else if (window.PaymentIntegration.initialize) {
                // Es una instancia con m√©todo initialize
                console.log('üîß PaymentIntegration es una instancia, inicializando...');
                await window.PaymentIntegration.initialize();
            } else if (window.paymentIntegration && window.paymentIntegration.initialize) {
                // Usar la instancia global alternativa
                console.log('üîß Usando window.paymentIntegration...');
                await window.paymentIntegration.initialize();
            } else {
                console.log('‚ö†Ô∏è PaymentIntegration encontrado pero sin m√©todo initialize, continuando...');
            }
            console.log('‚úÖ Sistema de pagos inicializado correctamente');
        } else {
            throw new Error('PaymentIntegration no est√° disponible');
        }
    }

    /**
     * Muestra mensaje de error si el sistema no puede iniciarse
     */
    showErrorMessage() {
        console.error(`
‚ùå ERROR: No se pudo inicializar el sistema de pagos

üîç DIAGN√ìSTICO:
${this.requiredModules.map(module => {
    const loaded = typeof window[module] !== 'undefined';
    return `${loaded ? '‚úÖ' : '‚ùå'} ${module}`;
}).join('\n')}

üõ†Ô∏è SOLUCIONES:
1. Verificar que todos los scripts est√©n incluidos en index.html
2. Revisar la consola para errores de JavaScript
3. Verificar que los archivos existen en las rutas correctas
4. Recargar la p√°gina
        `);

        // Mostrar mensaje visual en la p√°gina
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #fee;
            border: 2px solid #f00;
            padding: 20px;
            border-radius: 8px;
            z-index: 9999;
            max-width: 400px;
            font-family: Arial, sans-serif;
        `;
        errorDiv.innerHTML = `
            <h3 style="margin: 0 0 10px 0; color: #c00;">‚ö†Ô∏è Error del Sistema de Pagos</h3>
            <p style="margin: 0;">No se pudieron cargar todos los m√≥dulos requeridos.</p>
            <p style="margin: 10px 0 0 0; font-size: 12px;">Revisar consola para m√°s detalles.</p>
            <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 10px;">Cerrar</button>
        `;
        document.body.appendChild(errorDiv);
    }

    /**
     * Obtiene el estado del sistema
     */
    getSystemStatus() {
        const { allLoaded, moduleStatus } = this.checkModules();
        
        return {
            initialized: allLoaded,
            attempts: this.initializationAttempts,
            modules: moduleStatus,
            paymentManagerReady: window.PaymentManager?.isInitialized || false,
            paymentIntegrationReady: window.PaymentIntegration?.isInitialized || false
        };
    }

    /**
     * Fuerza reinicializaci√≥n del sistema
     */
    async forceReinitialize() {
        console.log('üîÑ Forzando reinicializaci√≥n del sistema...');
        this.initializationAttempts = 0;
        this.loadedModules.clear();
        
        // Limpiar sistemas existentes
        if (window.PaymentManager?.cleanup) {
            window.PaymentManager.cleanup();
        }
        if (window.PaymentIntegration?.cleanup) {
            window.PaymentIntegration.cleanup();
        }
        
        // Reinicializar
        return await this.initializeWhenReady();
    }
}

// Crear instancia global
const paymentSystemInitializer = new PaymentSystemInitializer();

// Hacer disponible globalmente
window.PaymentSystemInitializer = paymentSystemInitializer;

// Auto-inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Payment System Initializer cargado');
    
    // Esperar un poco para que otros scripts se carguen
    setTimeout(() => {
        paymentSystemInitializer.initializeWhenReady();
    }, 1000);
});

// Tambi√©n proporcionar funciones de utilidad globales
window.checkPaymentSystem = () => paymentSystemInitializer.getSystemStatus();
window.reinitializePaymentSystem = () => paymentSystemInitializer.forceReinitialize();

console.log('‚úÖ Payment System Initializer configurado');
